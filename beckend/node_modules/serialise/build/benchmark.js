"use strict";
var __decorate = (this && this.__decorate) || function (decorators, target, key, desc) {
    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;
    if (typeof Reflect === "object" && typeof Reflect.decorate === "function") r = Reflect.decorate(decorators, target, key, desc);
    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;
    return c > 3 && r && Object.defineProperty(target, key, r), r;
};
const serialise_1 = require("./serialise");
let SS = class SS extends String {
    constructor(s) {
        super('hello wrapped' + s);
        this.p = 42;
    }
    method() {
        return 42;
    }
};
SS = __decorate([
    serialise_1.serialisable
], SS);
let SSS = class SSS extends SS {
    constructor(s) {
        super(s);
        for (let j of 'abcdefghijklmnopqrstuvwxyz'.split(''))
            this[j] = 34;
    }
    method2() {
        return 2 * this.method();
    }
};
SSS = __decorate([
    serialise_1.serialisable
], SSS);
const num = 10000;
{
    const sss = new SS('goodbye');
    const sssArray = new Array(num);
    const timeStart = Date.now();
    for (var i = 0; i < num; i++) {
        sssArray[i] = serialise_1.deserialise(serialise_1.serialise(sss));
        sssArray[i].q = i;
    }
    const timeEnd = Date.now();
    const time = timeEnd - timeStart;
    console.log(`ser/deser instance with one property: time total: ${time}ms. time each (avg): ${time / num}ms. ops/sec = ${1000 / (time / num)}`);
}
{
    const sssArray = new Array(num);
    const timeStart = Date.now();
    for (var i = 0; i < num; i++) {
        sssArray[i] = new SSS('goodbye');
        sssArray[i]['i'] = i;
    }
    const timeEnd = Date.now();
    const time = timeEnd - timeStart;
    console.log(`create instances directly: time total: ${time}ms. time each (avg): ${time / num}ms. ops/sec = ${1000 / (time / num)}`);
}
{
    const sss = new SSS('goodbye');
    const sssArray = new Array(num);
    const timeStart = Date.now();
    for (var i = 0; i < num; i++) {
        sssArray[i] = serialise_1.deserialise(serialise_1.serialise(sss));
        sssArray[i].q = i;
    }
    const timeEnd = Date.now();
    const time = timeEnd - timeStart;
    console.log(`ser/deser instance with heaps of properties: time total: ${time}ms. time each (avg): ${time / num}ms. ops/sec = ${1000 / (time / num)}`);
}
